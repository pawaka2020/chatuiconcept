import 'dart:convert';
import 'package:flutter/cupertino.dart';
import 'package:pointycastle/pointycastle.dart';
import 'package:chatuiconcept/model/services.dart';
import 'package:supabase_flutter/supabase_flutter.dart';

class ChatUser {
  //id auto-generated by Supabase
  final int? id;
  //name of user
  final String name;
  //status whether 'online', 'active' or 'offline'
  final String status;
  //data for one image, stored in Storage of Supabase, but I want it to be default null
  final List<int>? imageData;
  //Signature of a user, only in string form without emojis or images.
  final String signature;
  //Last time a user is 'online'. Automatically generated by Supabase when user is created or when existing user
  //logs off.
  final DateTime? lastSeen;
  //password encrypted.
  final String passwordHash;

  /// Constructor.
  ChatUser({
    this.id,
    required this.name,
    this.status = 'offline',
    this.imageData,
    this.signature = '',
    this.lastSeen,
    required this.passwordHash,
  });

  /// Converts ChatUser to JSON Map.
  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'name': name,
      'status': status,
      'imageData': imageData,
      'signature': signature,
      'lastSeen': lastSeen?.toIso8601String(),
      'passwordHash': passwordHash,
    };
  }

  /// Creates ChatUser from JSON Map.
  /// I don't need password, so I set password as 'ENCRYPTED'
  static ChatUser fromJson(Map<String, dynamic> json) {
    return ChatUser(
      id: json['id'],
      name: json['name'],
      status: json['status'],
      imageData: json['imageData']?.cast<int>(),
      signature: json['signature'],
      lastSeen: json['lastSeen'] != null ? DateTime.parse(json['lastSeen']) : null,
      passwordHash:'ENCRYPTED'
      //passwordHash: json['passwordHash'],
    );
  }

  //name of Supabase database.
  String tableName = 'chat_users';
}

class ChatUserService extends Services
{
  @override
  List getOffline() {
    // TODO: implement getOffline
    throw UnimplementedError();
  }

  @override
  Future<List> getSupabase(bool test) async {
    final supabase = Supabase.instance.client;
    final response = await supabase.from('chat_users').select();
    List<dynamic> jsonArray = jsonDecode(jsonEncode(response));
    List<ChatUser> result = jsonArray.map((e) =>
        ChatUser.fromJson(e)).toList();
    if (test == true)
    {
      for (var chatUser in result) {
        debugPrint(chatUser.name);
      }
    }
    return result;
  }




}