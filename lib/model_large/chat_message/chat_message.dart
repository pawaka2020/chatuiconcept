import 'package:flutter/cupertino.dart';

import '../../singletons.dart';

class ChatMessage {
  /// Uid generated by Supabase. Only value is ''.
  final String uid;
  /// ChatUser(uid) of sender.
  final String senderUid;
  /// ChatUser(uid) of recipient.
  final String recipientUid;
  /// Text message, including emoji.
  final String message;
  /// URL file to store files.
  final String fileUrl;
  /// Date sent.
  final DateTime dateSent;

  /// Message posted by a User.
  ChatMessage({
    required this.uid,
    required this.senderUid,
    required this.recipientUid,
    required this.message,
    required this.fileUrl,
    required this.dateSent
  });

  /// Converts a ChatMessage object to a Map.
  Map<String, dynamic> toMap()  {
    return {
      //'uid': uid,
      'sender_uid': senderUid,
      'recipient_uid': recipientUid,
      'message': message,
      'file_url': fileUrl,
      'date_sent': dateSent.toIso8601String(),
    };
  }

  /// Creates a ChatMessage from Map.
  static ChatMessage fromMap(Map<String, dynamic> map) {
    return ChatMessage(
      uid: map['uid'],
      senderUid: map['sender_uid'],
      recipientUid: map['recipient_uid'],
      message: map['message'],
      fileUrl: map['file_url'] ?? '',
      dateSent: DateTime.parse(map['date_sent']),
    );
  }
}

class ChatMessageService{

  Future<void> toSupabase(ChatMessage message) async {
    await supabaseClient.from('chat_messages').insert(message.toMap());
    debugPrint("ChatMessage object inserted");
    /// update last message
    /// ChatLast last = ChatLastService().create(message);
    /// ChatLastService().updateLast(last);
  }

  Stream<List<ChatMessage>> getStream(bool test) {
    final response = supabaseClient
        .from('chat_messages')
        .stream(primaryKey: ['uid'])
    //.order('datecreated')
        .map((maps) =>
        List<Map<String, dynamic>>.from(maps).map((map) =>
            ChatMessage.fromMap(map)).toList());
    if (test == true){
      response.listen((data) {
        for (var message in data) {
          debugPrint(message.senderUid);
          debugPrint(message.message);
          debugPrint(message.fileUrl);
        }
      });
    }
    return response;
  }

  ChatMessage create(
      String senderUid,
      String recipientUid,
      String message,
      String fileUrl) {
    return ChatMessage(
        uid: '',
        senderUid: senderUid,
        recipientUid: recipientUid,
        message: message,
        fileUrl: fileUrl,
        dateSent: DateTime.now()
    );
  }
}